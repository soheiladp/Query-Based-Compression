# from time import sleep
#
#
# def sleep_decorator(function):
#
#     """
#     Limits how fast the function is
#     called.
#     """
#
#     def wrapper(*args, **kwargs):
#         sleep(2)
#         return function(*args, **kwargs)
#     return wrapper
#
#
# @sleep_decorator
# def print_number(num):
#     return num
#
# # print(print_number(222))
# for num in range(1, 6):
#     print(print_number(num))
eps = [0.01, 0.25, 0.5, 0.75]

acc = [1.725296219266828635e-01)/3, 1.087706618862174235e-01, 1.021263759621588996e-01, 0]
ut = []
kld = []
my01 = [(1.725296219266828635e-01)/3, (2.935352662695045911e+00)/3, (2.651854271950903619e-01)/3] # 500 queries, 200k i
my25 = [1.087706618862174235e-01, 2.687183307556203493e-01, 2.737761632086336494e+00] # 100 q, 200k i
my5 = [1.021263759621588996e-01, 2.728372518921365897e-01, 2.672687321757202472e+00]  # 100 q, 200k i
my5_40k = [6.861017827767401656e-02, 3.389493275978563425e-01, 2.756695912971784512e+00] # 100 q, 40k
my75 = [9.857882322185518298e-02, 2.694008683059291309e-01, 2.635786669058720388e+00] # 100q, 200k

#########################

# My alg
my1 = [3.535563300300548217e-01, 3.288932044554444545e-01, 4.377280261212729506e+00]
my25 = [3.669416993087393775e-01, 3.533150593237084358e-01, 4.769097325178973890e+00]
my5 = [3.707968559576911294e-01, 3.600294034427588552e-01, 4.904422173508019789e+00]
my75 = [3.741976163529249777e-01, 3.603122961476536434e-01, 4.963818385761775254e+00]
my10 = [3.736068435377630781e-01, 3.584056435944644736e-01, 4.996305701678246614e+00]

mwem10_1 = [5.966281537148110381e-02, 7.544451517443695465e-01, 7.085515941187097155e-01]
mwem10_25 = [4.383294359898992631e-02, 7.305855468127819830e-01, 7.056872620824008457e-01]
mwem10_5 = [6.781198676007915704e-02, 7.100342221916067231e-01, 7.063074851915831509e-01]
mwem10_75 = [6.194968911219933538e-02, 7.553643324737173703e-01, 7.042771482015829365e-01]
mwem10_1 = [6.619819158733664111e-02, 7.241721266599268070e-01, 7.054387415056970756e-01]

########################## Correlated data #################################
###### with EFPA #########

my10 = [8.460243278129558897e-01, 8.959531924279687809e-01, 8.478358244013777245e-01]
my75 = [8.794615942155590282e-01, 8.966304758022977106e-01, 8.488776231817869444e-01]
my5 = [8.774833769913495951e-01, 8.867800146147660767e-01, 8.555606034528491222e-01]
my25 = [7.952213337225871870e-01, 9.069256612806405604e-01, 8.460710927685898275e-01]
m1 = [6.841571162502901871e-01, 8.478621490772247915e-01, 8.846290211707792395e-01]

MWEM_10 = [1.346096821109885600e-01, 8.633289102538042048e-01, 8.874265714793195814e-01]
MWEM_75 = [1.307633675863334455e-01, 8.718196876789930938e-01, 8.756796307372231025e-01]
MWEM_5 = [1.191128521411450869e-01, 8.504774565236615791e-01, 8.661616293072299522e-01]
MWEM_25 = [1.236053243923868061e-01, 8.274713243035081156e-01, 9.060906222592153281e-01]
MWEM_1 = [1.154738973511295619e-01, 8.651883065440315601e-01, 8.914496227583654786e-01]

dawa_kld = [ 0.91624504851471589, 0.5769547919657233, 0.40572833809791425, 0.40635872916643367, 0.4318838752601557]
dawa_ut = [ 0.74205058070619789, 0.91953894309720474, 0.95681952941378956, 0.9611876889493417, 0.97176847110220455]

qa_kld = [6.453231027316359558e-01,6.333518567516573938e-01,6.252282913734180658e-01,6.401800609123691199e-01,6.340792990387956740e-01]
qa_ut = [9.146404641736850527e-01,9.195756043626307497e-01,9.204535162241036517e-01,9.166273983835940831e-01,9.185660492298263202e-01] 
qa_acc = [7.883035307969264993e-01,8.489113209952745542e-01,9.124058854176420041e-01,8.961940274404017748e-01,9.163874878283536640e-01]   

Q = numpy.load('q500.npy')
Q = numpy.load('q100.npy')
Q = numpy.load('q50.npy')
Q = query.RandomRange(1000, 50)

import interface as dawa
import query
f = open("/Users/sghaneeabadi/Desktop/xcorr.txt")
x = f.read().splitlines()
x = [int(i) for i in x]
import numpy
Q = numpy.load('q50.npy')


######## Frequency #########
attr1 = numpy.load('attr1.npy')
attr2 = numpy.load('attr2.npy')
x = np.zeros(100)
for i in range(len(attr1)):
    x[attr1[i] * 10 + attr2[i]] += 1
############################
f = open('xcorr.txt', 'w')
for a in x:
    f.write("%d\n" % a)
    
### KLD ###
sx = sum(x)
shatx = sum(hatx)
probs = numpy.zeros(len(x))
for i in range(len(x)):
    pi = ((x[i] + 1) * 1.0 / sx) / (1 + len(x) / sx)
    qi = ((hatx[i] + 1) * 1.0 / shatx) / (1 + len(hatx) / shatx)
    print(qi)
    probs[i] = pi * numpy.log(abs(pi / qi))
sum(probs)

#### Utility #####
error = 0
ans = [sum([sum(x[int(lb):int(rb)+1]) * wt for wt, lb, rb in q]) for q in Q]
for ind in range(len(Q)):
    q = list(Q[ind])
    appAns = sum([sum(hatx[int(lb):int(rb)+1]) * wt for wt, lb, rb in q])
    error += min(abs(ans[ind] - appAns), abs(ans[ind])) / max(1, abs(ans[ind]))
1-(error / len(Q))

###########################
#### Reconstructing The Table ####
attr11 = [] 
attr22 = [] 
for i in range(10):
    for j in range(10):
        for k in range(hatx[i * 10 + j]):
            attr11.append(i)
            attr22.append(j)
            

attr1_dawa = [] 
attr2_dawa = [] 
for i in range(10):
    for j in range(10):
        v = dawa_hatx[i * 10 + j]
        if x[i*10 + j] > 0 and v > 0:
            for k in range(v):
                attr1_dawa.append(i)
                attr2_dawa.append(j)
        else: # x[i*10 + j] > 0 and v < 0:
            attr1_dawa.append(np.random.randint(0,10)* -1)
            attr2_dawa.append(np.random.randint(0,10))
        # else:
        #     attr1_dawa.append(0)
        #     attr2_dawa.append(0)



qa_hatx = [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 6, 6, 7, 7, 7, 11, 20, 31, 30, 28, 28, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 11, 11, 11, 11, 14, 16, 16, 16, 16, 15, 13, 13, 13, 13, 13, 14, 14, 14, 36, 36, 17, 17, 11, 6, 6, 6, 4, 5, 10, 9, 10, 10, 10, 10, 7, 5, 5, 6, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4]
dawa_hatx = [16, 16, 3, 3, 3, 3, -1, -1, -1, -1, 19, 19, 19, 19, 4, -2, -2, -2, -2, 3, 3, 29, 29, 46, 16, 16, 3, 3, 14, 14, 14, 14, 28, 28, 66, 15, 15, 10, -2, -2, -2, 13, 13, 44, 67, 42, 9, 9, 0, 0, 0, 0, 14, 14, 50, 50, 40, 2, 2, 2, 2, 1, 1, 1, 1, 27, 27, 24, 2, 2, -1, -1, 1, 1, 1, 1, 7, 7, 7, 7, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2]    
dqa_hatx = [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 6, 6, 7, 7, 7, 10, 21, 32, 31, 27, 27, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 10, 10, 11, 11, 14, 16, 16, 16, 16, 16, 13, 13, 13, 13, 13, 14, 14, 14, 37, 37, 16, 16, 11, 6, 6, 6, 4, 5, 10, 8, 11, 10, 10, 10, 8, 6, 6, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4]

dqa_corr = 0.61734278
qa_corr = 0.61528938
dawa_corr = 0.75785416  0.75684667 0.4624792

###### Round to int ######
dqa_hatx = [int(round(a)) for a in dqa_hatx]    
    
    
dqa_hatx = [  6.5870575,    6.5870575 ,   4.86235224 ,  4.79066643 ,  4.79066643,4.79066643 ,  4.90189766 ,  4.94525529 ,  5.15848635  , 5.15848635,8.15654315 ,  8.15654315,   8.27285886 ,  8.27285886 ,  8.27285886,6.25542023 ,  6.1750198 ,   6.79688416 ,  6.79688416 ,  6.93423054,9.89206375 , 20.79929727 , 31.58211367 , 30.6819426  , 26.8835388,26.8835388  , 19.40821636 , 19.40821636 , 19.40821636 , 19.40821636,19.40939754 , 19.40939754 , 19.40939754 , 19.40821636 , 19.40821636,19.40821636 , 10.31214033 , 10.31214033 , 10.61468605 , 10.61468605,13.65865341 , 16.14102459 , 16.14102459 , 16.14102459 , 16.49618034, 15.62562074 , 13.23773721 , 13.23773721 , 13.23773721 , 13.23773721,12.97210006  ,14.12612283  ,14.12612283 , 14.12612283,  36.82651314, 36.82651314 , 16.49298318,  16.49298318 , 10.63756011 ,  6.48381621, 6.48381621 ,  5.62963176 ,  3.94631146 ,  5.0331835  ,  9.61740054,8.13831488 , 10.66231503 ,  9.76498147 ,  9.76498147 , 10.3630179, 7.74694072 ,  5.57387263 ,  5.57387263 ,  5.48736296 ,  4.5924618, 2.94800064  , 2.94800064 ,  2.94800064 ,  2.94800064 ,  2.94800064, 2.94800064  , 2.94800064 ,  2.94045303  , 2.7706542   , 1.44999794,1.49140117 ,  1.48384832  , 1.48384832 ,  1.48384832 ,  1.48384832,1.47083865 ,  0.97190582  , 1.58921931 ,  1.58921931 ,  1.62428505,1.9407982  ,  2.62224346  , 2.56578768 ,  2.56578768 ,  3.86768245]    
hatx = [  7.32540891,   7.32540891,   5.20977267,   5.08976919,   5.08976919, 5.08976919,   4.94914661,   5.0435061,    5.2548069,    5.2548069,8.60432107,   8.60432107,   8.83198681 ,  8.83198681 ,  8.83198681,5.66633903 ,  5.62392508 ,  6.16528248 ,  6.16528248 ,  6.24619153,10.52215011 , 19.68318942 ,31.06835227 , 30.7303849 ,  27.94463846, 27.94463846 , 18.7888766  , 18.7888766  , 18.7888766  , 18.7888766,18.85093232 , 18.85093232  ,18.85093232 , 18.7888766 ,  18.7888766,18.7888766  , 11.4052256  , 11.4052256  , 11.53065826 , 11.53065826,13.64658518  ,15.90564869 , 15.90564869 , 15.90564869 , 16.08922306,15.31773166  ,14.09790469 , 14.09790469 , 14.09790469 , 14.09790469,13.95912353  ,14.04296947 , 14.04296947 , 14.04296947 , 34.40753551,34.40753551  ,16.58917931  ,16.58917931 , 10.51309744  , 6.90864996,6.90864996 ,  6.85150076 ,  4.06720923  , 4.815194   ,  9.26713965,7.950937   , 10.74061077 , 10.01620401 , 10.01620401  ,10.26516526,6.38968092  , 4.40005119 ,  4.40005119 ,  4.89886859  , 4.29145448,3.29843603 ,  3.29843603 ,  3.29843603  , 3.29843603  , 3.29843603,3.29843603 ,  3.29843603 ,  3.21080698  , 3.04375496 ,  1.58153121,1.61680939  , 1.55183618 ,  1.55183618  , 1.55183618 ,  1.55183618,1.52280271  , 0.98083761  , 1.46810931 ,  1.46810931 ,  1.56398714,1.78535448 ,  2.54789864  , 2.5188277   , 2.5188277  ,  3.88786896]   
qa_hatx = [  6.68024615 ,  6.68024615  , 4.88532294  , 4.81788811 ,  4.81788811,4.81788811 ,  4.97048822 ,  4.97746549 ,  5.23778399 ,  5.23778399, 7.91102639  , 7.91102639 ,  8.04182017 ,  8.04182017 ,  8.04182017,6.18297201 ,  6.11236838 ,  6.79433378 ,  6.79433378 ,  6.92914591, 10.78109352 , 20.14522201 , 31.07618542 , 29.86257048 , 27.56093298, 27.56093298 , 19.25290458  ,19.25290458 , 19.25290458 , 19.25290458, 18.99995786 , 18.99995786 , 18.99995786 , 19.25290458 , 19.25290458, 19.25290458,  10.9561215  , 10.9561215  , 11.40137831 , 11.40137831,14.30625322,  15.88130816 , 15.88130816 , 15.88130816 , 16.04841693,15.23030709 , 13.27790023 , 13.27790023 , 13.27790023 , 13.27790023, 12.79432823 , 14.31139314 , 14.31139314 , 14.31139314 , 36.00136663,  36.00136663 , 17.12016008 , 17.12016008 , 10.67450187 ,  6.1720815,6.1720815   , 6.0186321  ,  3.86825139  , 4.71676195 ,  9.61905946, 8.66507336 , 10.41949093 ,  9.54897035  , 9.54897035 , 10.32239731,6.76107332 ,  4.94335473 ,  4.94335473 ,  5.52020752 ,  4.77926776,  3.20506312  , 3.20506312 ,  3.20506312 ,  3.20506312  , 3.20506312,3.20506312  , 3.20506312  , 3.15761792 ,  2.9663822   , 1.45458283,1.47524358 ,  1.46285972  , 1.46285972 ,  1.46285972  , 1.46285972,1.46080913 ,  0.96983105  , 1.63777332  , 1.63777332  , 1.75473412,2.02677417  , 2.81909296  , 2.78973834  , 2.78973834  , 4.41162305]
    
################################
####### SVD ####################

import cmath
# for j in range(len(s)):
#     (magn, phi) = cmath.polar(s[j])
#     s[j] = cmath.rect(magn + numpy.random.laplace(2), phi)
l = [attr1, attr2]
dt = numpu.array(numpy.transpose(l))

U, s, V = np.linalg.svd(dt, full_matrices=True)

su = sum(s)
for j in range(len(s)):
    s[j] = s[j]+ 2 * numpy.random.laplace(1)

S = np.zeros((1000, 2), dtype=complex)
S[:2, :2] = np.diag(s)
dtp = np.dot(U, np.dot(S, V))

dp = np.transpose(dtp)

attr11 = dp[0]
attr22 = dp[1]

np.corrcoef(attr11, attr22)

########################################
######### Weighted SVD ################
e = 0.5
l = [attr1, attr2]
dt = numpu.array(numpy.transpose(l))

U, s, V = np.linalg.svd(dt, full_matrices=True)

su = sum(s)
for j in range(len(s)):
    s[j] = s[j]+ (s[j] / su) * (len(s) / e) * numpy.random.laplace(1)

S = np.zeros((1000, 2), dtype=complex)
S[:2, :2] = np.diag(s)
dtp = np.dot(U, np.dot(S, V))

dp = np.transpose(dtp)

attr11 = dp[0]
attr22 = dp[1]

np.corrcoef(attr11, attr22)


########################################
############ DAWA on each Attribute ####

attr11 = dawa.Algorithm('dawa').Run(Q, attr1l, 0.5)
attr22 = dawa.Algorithm('dawa').Run(Q, attr2l, 0.5)

np.corrcoef(attr11, attr22)

#########################################
####  DQA #########

attr11 = [ 3.61250177,  3.61250177  3.61250177  3.61250177  3.61250177  3.61250177
  3.61250177,  3.61250177  3.61250177  3.61250177  3.61250177  3.61250177
  3.61250177 , 3.61857479  3.61857479  3.61857479  3.61857479  3.61857479
  3.61857479 , 3.61857479  3.61857479  3.61857479  3.61857479  3.61857479
  3.61857479 , 3.61468346  3.61468346  3.61468346  3.61468346  3.61468346
  3.4191684 , 3.4191684   3.4191684   3.4191684   3.4191684   3.4191684
  3.4191684  , 3.4191684   3.4191684   3.42455402  3.42455402  3.42455402
  3.42455402 , 3.42455402  3.42455402  3.42455402  3.42455402  3.42455402
  3.42455402 , 3.42455402  3.42455402  3.42455402  3.42455402  3.42455402
  3.42455402 , 3.42455402  3.42455402  3.42455402  3.42455402  3.42455402
  3.42455402 , 3.42455402  3.42455402  3.42455402  3.42455402  3.42455402
  3.42455402 , 3.42455402  3.42455402  3.42455402  3.38040143  3.38040143
  3.38027404  ,3.38470503  3.38027404  3.38027404  3.38027404  3.38027404
  3.38027404,  3.38027404  3.38027404  3.38027404  3.39013849  3.39013849
  3.39013849 , 3.39013849  3.39013849  3.39013849  3.39277889  3.39277889
  3.39277889 , 3.39277889  3.39277889  3.39277889  3.39277889  3.39277889
  3.39277889 , 3.39277889  3.39277889  3.39277889  3.39277889  3.39277889
  3.39277889 , 3.39277889  3.39277889  3.45840522  3.45840522  3.45840522
  3.45840522 , 3.45840522  3.45840522  3.45840522  3.45840522  3.45840522
  3.45840522 , 3.45840522  3.45840522  3.45840522  3.45840522  3.45840522
  3.45840522 , 3.45840522  3.45840522  3.45840522  3.45840522  3.45840522
  3.45840522,  3.45840522  3.47302342  3.47302342  3.47302342  3.47302342
  3.47302342 , 3.47302342  3.47302342  3.5745838   3.65253654  3.65253654
  3.65253654 , 3.65253654  3.70162757  3.70162757  3.70162757  3.72545068
  3.72545068 , 3.72545068  3.72545068  3.72545068  3.72545068  3.72545068
  3.72545068 , 3.72545068  3.72545068  3.78406768  3.78406768  3.78406768
  3.78406768,  3.78406768  3.78406768  3.78406768  3.78406768  3.78406768
  3.78406768 , 3.78406768  3.78406768  3.78406768  3.78406768  3.78406768
  3.78406768,  3.78406768  3.78406768  3.78406768  3.78406768  3.87675037
  3.87675037 , 3.87675037  3.87675037  3.87675037  3.87675037  3.87675037
  3.87675037,  3.87675037  3.87675037  3.87675037  3.87675037  3.87675037
  3.87675037 , 3.87675037  3.87675037  3.87675037  3.87675037  3.87675037
  3.87675037,  3.87675037  3.87675037  3.87675037  3.87675037  3.86026109
  3.86026109,  3.86026109  3.86026109  3.86026109  3.86026109  3.86026109
  3.86026109,  3.86026109  3.86026109  3.86026109  3.86026109  3.86026109
  3.86026109,  3.86026109  3.86026109  3.86026109  3.86026109  3.86026109
  3.86026109 , 3.86026109  3.86026109  3.86026109  3.86026109  3.86026109
  3.86026109 , 3.86026109  3.8766273   3.8766273   3.93017558  3.93017558
  3.93017558,  3.93017558  3.93017558  3.91358329  3.91358329  3.91358329
  3.91358329,  3.91358329  3.91358329  3.91358329  3.91358329  3.86324009
  3.86324009,  3.86324009  3.86324009  3.86324009  3.86324009  3.86324009
  3.85675646,  3.85675646  3.85675646  3.85675646  3.85675646  3.85675646
  3.85675646,  3.85675646  3.85675646  3.80420851  3.73202025  3.73202025
  3.63509717,  3.63509717  3.63509717  3.63509717  3.63509717  3.63509717
  3.63509717 , 3.63509717  3.62214284  3.62214284  3.62214284  3.58101878
  3.58101878 , 3.58101878  3.58101878  3.58101878  3.58101878  3.58101878
  3.58101878 , 3.58101878  3.58101878  3.58101878  3.55129639  3.55129639
  3.55129639,  3.55129639  3.55129639  3.55129639  3.55129639  3.55129639
  3.55129639,  3.55129639  3.55129639  3.55129639  3.55129639  3.55129639
  3.55129639 , 3.55129639  3.55129639  3.55129639  3.55129639  3.55129639
  3.55129639,  3.55129639  3.55129639  3.54910687  3.54910687  3.54910687
  3.54910687,  3.54910687  3.54910687  3.54910687  3.54910687  3.54910687
  3.54910687,  3.54910687  3.54910687  3.54910687  3.54910687  3.54910687
  3.54634481,  3.54634481  3.54634481  3.54634481  3.54634481  3.54634481
  3.54634481,  3.54634481  3.531418    3.531418    3.531418    3.531418
  3.531418   , 3.531418    3.531418    3.531418    3.531418    3.531418
  3.531418  ,  3.531418    3.531418    3.49470549  3.49470549  3.49470549
  3.49518346 , 3.49518346  3.49518346  3.49518346  3.49409331  3.46225695
  3.47704614,  3.47704614  3.47704614  3.47704614  3.47704614  3.47704614
  3.47704614,  3.47704614  3.47704614  3.47704614  3.47704614  3.47704614
  3.47704614 , 3.47704614  3.47704614  3.47704614  3.47704614  3.47704614
  3.47704614 , 3.47704614  3.47704614  3.47704614  3.47704614  3.47704614
  3.47704614 , 3.47704614  3.47704614  3.47704614  3.47704614  3.47704614
  3.47704614 , 3.47704614  3.47704614  3.47704614  3.40283873  3.40283873
  3.40283873,  3.40283873  3.40283873  3.40283873  3.40283873  3.40283873
  3.40283873 , 3.40283873  3.40283873  3.40283873  3.40283873  3.40283873
  3.40283873 , 3.40283873  3.40283873  3.40283873  3.40283873  3.40352329
  3.40352329 , 3.40352329  3.40352329  3.40352329  3.40352329  3.40352329
  3.40352329 , 3.40352329  3.40352329  3.40352329  3.40352329  3.40352329
  3.40352329  3.40352329  3.40352329  3.3939915   3.3939915   3.3939915
  3.3939915   3.3939915   3.58806688  3.59653368  3.59653368  3.59653368
  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368
  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368
  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368
  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368
  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368
  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368
  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368  3.59653368
  3.59653368  3.59653368  3.5908776   3.5908776   3.5908776   3.5908776
  3.5908776   3.5908776   3.5908776   3.5908776   3.5908776   3.5908776
  3.5908776   3.5908776   3.5908776   3.5908776   3.5908776   3.5908776
  3.5908776   3.5908776   3.5908776   3.51756484  3.51756484  3.51756484
  3.51756484  3.51756484  3.51756484  3.51756484  3.51756484  3.51207495
  3.51207495  3.51207495  3.51207495  3.51207495  3.51207495  3.51207495
  3.51207495  3.51207495  3.51207495  3.51207495  3.50933933  3.50933933
  3.50933933  3.50933933  3.50933933  3.50933933  3.51187083  3.51187083
  3.51187083  3.51187083  3.51187083  3.51187083  3.51187083  3.56506572
  3.56506572  3.56506572  3.56506572  3.56506572  3.56506572  3.56506572
  3.56506572  3.56506572  3.56506572  3.56506572  3.56506572  3.56506572
  3.56506572  3.56506572  3.56506572  3.56784477  3.56784477  3.56784477
  3.56784477  3.56784477  3.56784477  3.56784477  3.56784477  3.56784477
  3.56784477  3.56784477  3.56784477  3.57522411  3.57522411  3.57522411
  3.57522411  3.57522411  3.58909163  3.58909163  3.58901518  3.58901518
  3.58901518  3.58901518  3.58901518  3.58901518  3.58901518  3.58901518
  3.58901518  3.58901518  3.60365937  3.60365937  3.60365937  3.60206109
  3.60206109  3.60769165  3.60769165  3.60769165  3.60769165  3.60769165
  3.60769165  3.60769165  3.60769165  3.60769165  3.60769165  3.60769165
  3.67074989  3.67074989  3.67074989  3.67074989  3.71858468  3.71858468
  3.71858468  3.71858468  3.71858468  3.71858468  3.71858468  3.71858468
  3.71858468  3.71858468  3.71858468  3.71858468  3.71807616  3.71807616
  3.71807616  3.71807616  3.71807616  3.71807616  3.71807616  3.71807616
  3.71807616  3.71040197  3.71040197  3.71040197  3.71040197  3.71040197
  3.71040197  3.71040197  3.71040197  3.71040197  3.71040197  3.71040197
  3.71040197  3.71040197  3.71040197  3.71040197  3.71040197  3.75886482
  3.75886482  3.75886482  3.75886482  3.75886482  3.75886482  3.75886482
  3.75886482  3.75886482  3.75810879  3.75810879  3.75810879  3.75810879
  3.75810879  3.75810879  3.75810879  3.75810879  3.75810879  3.75810879
  3.75810879  3.75810879  3.75810879  3.75810879  3.75915101  3.75915101
  3.75915101  3.75915101  3.75915101  3.75915101  3.75915101  3.75915101
  3.75915101  3.75915101  3.75915101  3.75915101  3.75915101  3.75915101
  3.75915101  3.75915101  3.75915101  3.75915101  3.75915101  3.76937845
  3.76937845  3.76937845  3.76937845  3.76937845  3.74527444  3.74527444
  3.78828479  3.78828479  3.78828479  3.78828479  3.78828479  3.78828479
  3.78828479  3.77289034  3.77289034  3.77289034  3.77289034  3.77289034
  3.77289034  3.77289034  3.76343464  3.76343464  3.76343464  3.76343464
  3.76343464  3.76343464  3.76343464  3.76343464  3.76343464  3.76343464
  3.76343464  3.76343464  3.76343464  3.76343464  3.76343464  3.76343464
  3.76343464  3.76343464  3.76343464  3.76343464  3.76343464  3.76343464
  3.76343464  3.76351481  3.76351481  3.76351481  3.76351481  3.76351481
  3.76351481  3.76351481  3.76351481  3.76351481  3.76351481  3.76351481
  3.76351481  3.76351481  3.76351481  3.76351481  3.76351481  3.76351481
  3.76351481  3.76351481  3.76351481  3.76351481  3.76351481  3.76351481
  3.76351481  3.79501335  3.79501335  3.79501335  3.79501335  3.7860793
  3.78775924  3.78775924  3.78775924  3.78775924  3.78775924  3.78775924
  3.78670909  3.78670909  3.78670909  3.78670909  3.78670909  3.78670909
  3.78670909  3.76809007  3.76809007  3.76809007  3.76809007  3.76809007
  3.76809007  3.76809007  3.76809007  3.76809007  3.76809007  3.76809007
  3.76809007  3.76809007  3.76809007  3.76809007  3.76809007  3.7596118
  3.7596118   3.7596118   3.7596118   3.7596118   3.70137363  3.70137363
  3.70137363  3.70137363  3.70137363  3.70137363  3.63778931  3.63778931
  3.63778931  3.67600495  3.67600495  3.67614348  3.67614348  3.67614348
  3.67614348  3.67614348  3.67614348  3.67614348  3.67614348  3.67614348
  3.67614348  3.67614348  3.67614348  3.67614348  3.67614348  3.62739042
  3.62739042  3.62739042  3.62739042  3.62739042  3.62739042  3.62739042
  3.62739042  3.62739042  3.62739042  3.62739042  3.62739042  3.62739042
  3.62739042  3.62739042  3.62739042  3.62739042  3.62739042  3.62739042
  3.62739042  3.62739042  3.57068982  3.57068982  3.57068982  3.57068982
  3.57068982  3.57068982  3.57068982  3.57068982  3.57029888  3.57029888
  3.57029888  3.57029888  3.57029888  3.57029888  3.57029888  3.57029888
  3.57029888  3.57029888  3.57029888  3.57029888  3.57029888  3.57029888
  3.57029888  3.57029888  3.57250147  3.57250147  3.57250147  3.57250147
  3.57250147  3.57250147  3.57250147  3.57250147  3.57250147  3.57250147
  3.57250147  3.57250147  3.57250147  3.57250147  3.57250147  3.57250147
  3.57250147  3.57250147  3.57250147  3.57250147  3.57250147  3.57250147
  3.57250147  3.57250147  3.57250147  3.57250147  3.57250147  3.57250147
  3.57250147  3.57250147  3.57250147  3.57250147  3.73013529  3.73013529
  3.73013529  3.73013529  3.73013529  3.73013529  3.73013529  3.73013529
  3.73013529  3.73013529  3.73013529  3.73013529  3.74856676  3.74856676
  3.74856676  3.74856676  3.7497363   3.7497363   3.7117056   3.7117056
  3.7117056   3.7117056   3.7117056   3.7117056   3.7117056   3.7117056
  3.7117056   3.7117056   3.7117056   3.7117056   3.7117056   3.7117056
  3.7117056   3.7117056   3.7117056   3.7117056   3.7117056   3.7117056
  3.7117056   3.7117056   3.69736432  3.69736432  3.69736432  3.69736432
  3.69736432  3.69736432  3.69736432  3.69736432  3.69736432  3.70570223
  3.70570223  3.69564755  3.69564755  3.69564755  3.69564755  3.69564755
  3.69564755  3.69564755  3.69564755  3.69564755  3.69564755  3.69564755
  3.69564755  3.69564755  3.69564755  3.69564755  3.69564755  3.69564755
  3.69564755  3.73351372  3.73351372  3.73351372  3.73351372  3.79017836
  3.79017836  3.79017836  3.79017836  3.79017836  3.73351372  3.73351372
  3.73351372  3.73351372  3.73351372  3.73351372  3.73351372  3.73351372
  3.73351372  3.73351372  3.73351372  3.73351372  3.73351372  3.73753298
  3.73753298  3.73753298  3.61250177  3.61250177  3.61250177  3.61250177
  3.61250177  3.61250177  3.61250177  3.61250177  3.61250177  3.61250177
  3.61250177  3.61250177  3.61250177  3.61250177  3.61250177  3.61250177
  3.61250177  3.61250177  3.61250177  3.61250177  3.61250177  3.61250177
  3.61250177  3.61250177  3.61250177  3.61250177  3.61250177  3.61250177
  3.61250177  3.61250177  3.61250177  3.61250177]



    
    